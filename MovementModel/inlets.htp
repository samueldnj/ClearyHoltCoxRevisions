#if !defined(_inlets_)
#  define _inlets_

class model_data : public ad_comm{
  data_int I;
  data_int J;
  data_vector r;
  data_matrix R;
  data_number dumm;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_matrix logitTheta;
  param_init_number logM;
  param_init_number logFbar;
  param_init_vector alpha;
  param_init_number d;
  param_init_vector Z;
  param_init_vector F;
  param_stddev_matrix Theta;
  param_number M;
  param_number Fbar;
  param_matrix Rhat;
  param_matrix pRhat;
  param_vector mnLogLike;
  param_vector dirLogPrior;
  param_vector logPostFun;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value nll;
  param_vector pen;
public:
  virtual void userfunction(void);
  virtual void report(const dvector& gradients);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void){}
  void predRecoveries(void);
  void predRecProb(void);
  void logPriorVector(void);
  void logLikelihoodVector(void);
  void logPostVector(void);

};
#endif
